// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: api/ipam.proto

package ipam_as

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IPManagementClient is the client API for IPManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IPManagementClient interface {
	AllocateIP(ctx context.Context, in *AllocateIPRequest, opts ...grpc.CallOption) (*AllocateIPResponse, error)
	ReleaseIP(ctx context.Context, in *ReleaseIPRequest, opts ...grpc.CallOption) (*ReleaseIPResponse, error)
}

type iPManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewIPManagementClient(cc grpc.ClientConnInterface) IPManagementClient {
	return &iPManagementClient{cc}
}

func (c *iPManagementClient) AllocateIP(ctx context.Context, in *AllocateIPRequest, opts ...grpc.CallOption) (*AllocateIPResponse, error) {
	out := new(AllocateIPResponse)
	err := c.cc.Invoke(ctx, "/ipamas.IPManagement/AllocateIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPManagementClient) ReleaseIP(ctx context.Context, in *ReleaseIPRequest, opts ...grpc.CallOption) (*ReleaseIPResponse, error) {
	out := new(ReleaseIPResponse)
	err := c.cc.Invoke(ctx, "/ipamas.IPManagement/ReleaseIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPManagementServer is the server API for IPManagement service.
// All implementations must embed UnimplementedIPManagementServer
// for forward compatibility
type IPManagementServer interface {
	AllocateIP(context.Context, *AllocateIPRequest) (*AllocateIPResponse, error)
	ReleaseIP(context.Context, *ReleaseIPRequest) (*ReleaseIPResponse, error)
	mustEmbedUnimplementedIPManagementServer()
}

// UnimplementedIPManagementServer must be embedded to have forward compatible implementations.
type UnimplementedIPManagementServer struct {
}

func (UnimplementedIPManagementServer) AllocateIP(context.Context, *AllocateIPRequest) (*AllocateIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateIP not implemented")
}
func (UnimplementedIPManagementServer) ReleaseIP(context.Context, *ReleaseIPRequest) (*ReleaseIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseIP not implemented")
}
func (UnimplementedIPManagementServer) mustEmbedUnimplementedIPManagementServer() {}

// UnsafeIPManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IPManagementServer will
// result in compilation errors.
type UnsafeIPManagementServer interface {
	mustEmbedUnimplementedIPManagementServer()
}

func RegisterIPManagementServer(s grpc.ServiceRegistrar, srv IPManagementServer) {
	s.RegisterService(&IPManagement_ServiceDesc, srv)
}

func _IPManagement_AllocateIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPManagementServer).AllocateIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipamas.IPManagement/AllocateIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPManagementServer).AllocateIP(ctx, req.(*AllocateIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPManagement_ReleaseIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPManagementServer).ReleaseIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipamas.IPManagement/ReleaseIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPManagementServer).ReleaseIP(ctx, req.(*ReleaseIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IPManagement_ServiceDesc is the grpc.ServiceDesc for IPManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IPManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipamas.IPManagement",
	HandlerType: (*IPManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateIP",
			Handler:    _IPManagement_AllocateIP_Handler,
		},
		{
			MethodName: "ReleaseIP",
			Handler:    _IPManagement_ReleaseIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ipam.proto",
}
